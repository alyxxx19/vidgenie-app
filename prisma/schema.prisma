generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String          @id @default(cuid())
  email                  String          @unique @db.VarChar(320) // RFC 5321 limit
  name                   String?         @db.VarChar(100)
  firstName              String?         @db.VarChar(50)
  lastName               String?         @db.VarChar(50)
  phone                  String?         @db.VarChar(20)
  avatar                 String?         @db.VarChar(500)
  bio                    String?         @db.VarChar(500)
  website                String?         @db.VarChar(200)
  location               String?         @db.VarChar(100)
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  lastLoginAt            DateTime?
  creatorType            String          @default("solo") @db.VarChar(20)
  platforms              String[]
  preferredLang          String          @default("fr") @db.VarChar(5)
  timezone               String          @default("Europe/Paris") @db.VarChar(50)
  planId                 String          @default("free") @db.VarChar(50)
  creditsBalance         Int             @default(100)
  credits                Int             @default(100)
  creditsUsed            Int             @default(0)
  subscriptionId         String?
  stripeCustomerId       String?         @unique @db.VarChar(100)
  stripeSubscriptionId   String?         @unique @db.VarChar(100)
  stripeCurrentPeriodEnd DateTime?
  stripePriceId          String?         @db.VarChar(100)
  stripePaymentMethodId  String?         @db.VarChar(100)
  apiCredentials         ApiCredential[]
  assets                 Asset[]
  creditLedger           CreditLedger[]
  jobs                   Job[]
  posts                  Post[]
  projects               Project[]
  prompts                Prompt[]
  socialAccounts         SocialAccount[]
  stripeCustomer         StripeCustomer?
  stripePayments         StripePayment[]
  usageEvents            UsageEvent[]
  generationJobs         GenerationJob[]
  
  // Nouvelles relations PRD V2
  apiKeys                UserApiKeys?
  creditTransactions     CreditTransaction[]
  workflowExecutions     WorkflowExecution[]
  contents               Content[]
  userSettings           UserSettings?

  @@index([email, planId])
  @@index([createdAt])
  @@index([creditsBalance]) // Pour les requêtes de billing
  @@index([stripeCustomerId]) // Optimisation Stripe
  @@map("users")
}

model ApiCredential {
  id            String    @id @default(cuid())
  userId        String
  provider      String
  encryptedKey  String
  encryptionIV  String    // Vecteur d'initialisation pour AES-256
  isActive      Boolean   @default(true)
  lastValidated DateTime?
  validationStatus String @default("unchecked") // "valid" | "invalid" | "unchecked"
  lastError     String?   // Message d'erreur si validation échoue
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider])
  @@map("api_credentials")
}

model SocialAccount {
  id           String    @id @default(cuid())
  userId       String
  platform     String
  accountId    String
  username     String
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform, accountId])
  @@map("social_accounts")
}

model Project {
  id          String    @id @default(cuid())
  userId      String
  name        String
  description String?
  isDefault   Boolean   @default(false)
  category    String?
  tags        String[]  @default([])
  priority    String    @default("medium")
  status      String    @default("active")
  platforms   String[]  @default([])
  startDate   DateTime?
  endDate     DateTime?
  targetPosts Int?
  color       String?
  isPublic    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  assets         Asset[]
  jobs           Job[]
  posts              Post[]
  generationJobs     GenerationJob[]
  workflowExecutions WorkflowExecution[]
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("projects")
}

model Job {
  id                     String       @id @default(cuid())
  userId                 String
  projectId              String?
  type                   String       @db.VarChar(50)
  status                 String       @default("pending") @db.VarChar(20)
  prompt                 String?      @db.Text
  config                 Json?
  estimatedTime          Int?         // En secondes
  actualTime             Int?         // En secondes
  progress               Int          @default(0) @db.SmallInt // 0-100
  estimatedTimeRemaining Int?         // En secondes
  metadata               Json?
  resultAssetId          String?      @unique
  resultPostId           String?      @unique
  errorMessage           String?      @db.Text
  inngestId              String?      @db.VarChar(100)
  priority               Int          @default(0) @db.SmallInt
  retryCount             Int          @default(0) @db.SmallInt
  maxRetries             Int          @default(3) @db.SmallInt
  createdAt              DateTime     @default(now())
  startedAt              DateTime?
  completedAt            DateTime?
  updatedAt              DateTime     @updatedAt
  resultAsset            Asset?       @relation("JobResult")
  project                Project?     @relation(fields: [projectId], references: [id])
  user                   User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  resultPost             Post?        @relation("JobResultPost")
  usageEvents            UsageEvent[]

  @@index([userId, status, createdAt]) // Job queue par utilisateur
  @@index([status, priority, createdAt]) // Queue globale avec priorité
  @@index([inngestId]) // Webhook callbacks
  @@index([type, status]) // Jobs par type
  @@index([projectId, status]) // Jobs par projet
  @@map("jobs")
}

model Asset {
  id              String   @id @default(cuid())
  userId          String
  projectId       String?
  jobId           String?  @unique
  filename        String   @db.VarChar(255)
  originalName    String?  @db.VarChar(255)
  mimeType        String   @db.VarChar(50)
  fileSize        Int      // En bytes
  duration        Int?     // En secondes pour vidéos
  width           Int?
  height          Int?
  s3Key           String   @unique @db.VarChar(500)
  s3Bucket        String   @db.VarChar(100)
  s3Region        String   @db.VarChar(20)
  publicUrl       String?  @db.VarChar(1000)
  thumbnail       String?  @db.VarChar(500)
  thumbnailUrl    String?  @db.VarChar(1000)
  thumbnailS3Key  String?  @db.VarChar(500)
  frameRate       Int?
  previewGifPath  String?  @db.VarChar(500)
  generatedBy     String?  @db.VarChar(50)
  prompt          String?  @db.Text
  aiConfig        Json?
  status          String   @default("processing") @db.VarChar(20)
  tags            String[] @default([])
  description     String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  creatorJob      Job?     @relation("JobResult", fields: [jobId], references: [resultAssetId])
  project         Project? @relation(fields: [projectId], references: [id])
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts           Post[]
  imageJobs       GenerationJob[] @relation("ImageAsset")
  videoJobs       GenerationJob[] @relation("VideoAsset")

  @@index([userId, status, createdAt]) // Dashboard et filtering
  @@index([s3Key]) // Lookups par S3
  @@index([userId, createdAt]) // Timeline assets
  @@index([projectId, createdAt]) // Assets par projet
  @@index([status, createdAt]) // Processing queue
  @@index([mimeType]) // Filtrage par type
  @@map("assets")
}

model Post {
  id              String    @id @default(cuid())
  userId          String
  projectId       String?
  assetId         String?
  jobId           String?   @unique
  title           String?   @db.VarChar(255)
  description     String?   @db.Text
  hashtags        String[]
  platforms       String[]
  scheduledAt     DateTime?
  publishedAt     DateTime?
  status          String    @default("draft") @db.VarChar(20)
  platformData    Json?
  seoOptimized    Boolean   @default(false)
  performanceData Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  asset           Asset?    @relation(fields: [assetId], references: [id])
  creatorJob      Job?      @relation("JobResultPost", fields: [jobId], references: [resultPostId])
  project         Project?  @relation(fields: [projectId], references: [id])
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status, createdAt]) // Dashboard posts
  @@index([scheduledAt]) // Scheduling queue
  @@index([platforms, scheduledAt]) // Planning par plateforme
  @@index([status, scheduledAt]) // Publishing queue
  @@index([projectId, status]) // Posts par projet
  @@map("posts")
}

model Prompt {
  id                String    @id @default(cuid())
  userId            String?
  title             String
  content           String
  category          String?
  tags              String[]  @default([])
  usageCount        Int       @default(0)
  lastUsedAt        DateTime?
  isTemplate        Boolean   @default(false)
  isPublic          Boolean   @default(false)
  isPinned          Boolean   @default(false)
  
  // Video-specific fields
  type              String    @default("image") // "image" | "video" | "image-to-video"
  videoSettings     Json?     // VideoPromptSettings as JSON
  templateKey       String?   // Reference to predefined template
  variables         Json?     // Template variables as JSON
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isPinned])
  @@index([isTemplate, isPublic])
  @@index([type, category])
  @@map("prompts")
}

model Plan {
  id                String   @id @default(cuid())
  name              String   @unique
  description       String?
  price             Int
  currency          String   @default("EUR")
  stripePriceId     String?  @unique
  stripeProductId   String?
  creditsPerMonth   Int
  maxGenerationsDay Int
  maxStorageGB      Int
  features          String[]
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("plans")
}

model CreditLedger {
  id          String   @id @default(cuid())
  userId      String
  amount      Int
  type        String   @db.VarChar(50)
  description String?  @db.VarChar(255)
  costEur     Decimal? @db.Decimal(10, 4)
  jobId       String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt]) // Timeline utilisateur
  @@index([userId, type, createdAt]) // Par type de transaction
  @@index([jobId]) // Lien vers jobs
  @@map("credit_ledger")
}

model UsageEvent {
  id        String   @id @default(cuid())
  userId    String?
  jobId     String?
  event     String   @db.VarChar(50)
  platform  String?  @db.VarChar(20)
  provider  String?  @db.VarChar(20)
  metadata  Json?
  costEur   Decimal? @db.Decimal(10, 4)
  duration  Int?     // En millisecondes
  createdAt DateTime @default(now())
  job       Job?     @relation(fields: [jobId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])

  @@index([event, createdAt]) // Analytics par event
  @@index([userId, createdAt]) // Timeline utilisateur
  @@index([provider, createdAt]) // Analytics provider
  @@index([platform, createdAt]) // Analytics plateforme
  @@map("usage_events")
}

model StripeWebhook {
  id            String    @id @default(cuid())
  stripeEventId String    @unique
  eventType     String
  processed     Boolean   @default(false)
  attempts      Int       @default(0)
  lastError     String?
  data          Json?
  createdAt     DateTime  @default(now())
  processedAt   DateTime?

  @@index([processed, createdAt])
  @@map("stripe_webhooks")
}

model StripeCustomer {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  stripeCustomerId       String    @unique
  email                  String
  name                   String?
  subscriptionId         String?
  subscriptionStatus     String?
  currentPeriodEnd       DateTime?
  cancelAtPeriodEnd      Boolean   @default(false)
  defaultPaymentMethodId String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("stripe_customers")
}

model StripePayment {
  id              String   @id @default(cuid())
  userId          String
  stripePaymentId String   @unique
  stripeInvoiceId String?
  amount          Int
  currency        String   @default("eur")
  status          String
  description     String?
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@map("stripe_payments")
}

model GenerationJob {
  id                String   @id @default(cuid())
  userId            String
  projectId         String?
  
  // Type de génération
  kind              String   @db.VarChar(20) // 'IMAGE' | 'VIDEO' | 'IMAGE_TO_VIDEO'
  status            String   @db.VarChar(20) // Machine à états
  
  // Prompts
  inputPrompt       String   @db.Text
  imagePrompt       String?  @db.Text
  videoPrompt       String?  @db.Text
  
  // Assets liés
  imageAssetId      String?
  videoAssetId      String?
  
  // Provider data
  providerJobId     String?  @unique @db.VarChar(100)
  provider          String?  @db.VarChar(20) // 'openai' | 'veo3'
  providerData      Json?
  
  // Coûts et métriques
  costCents         Int      @default(0)
  processingTime    Int?     // millisecondes
  retryCount        Int      @default(0) @db.SmallInt
  
  // Erreurs
  errorCode         String?  @db.VarChar(50)
  errorMessage      String?  @db.Text
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  startedAt         DateTime?
  completedAt       DateTime?
  
  // Relations
  user              User     @relation(fields: [userId], references: [id])
  project           Project? @relation(fields: [projectId], references: [id])
  imageAsset        Asset?   @relation("ImageAsset", fields: [imageAssetId], references: [id])
  videoAsset        Asset?   @relation("VideoAsset", fields: [videoAssetId], references: [id])
  webhooks          Webhook[]
  
  @@index([userId, status, createdAt]) // Dashboard utilisateur
  @@index([status, kind, createdAt]) // Queue par type
  @@index([providerJobId]) // Webhook callbacks
  @@index([provider, status]) // Monitoring par provider
  @@index([userId, kind, createdAt]) // Historique par type
  @@index([projectId, createdAt]) // Analytics projet
  @@map("generation_jobs")
}

model Webhook {
  id                String   @id @default(cuid())
  provider          String   // 'veo3' | 'openai'
  jobId             String
  
  // Payload
  payload           Json
  headers           Json?
  signature         String?
  
  // Vérification
  verified          Boolean  @default(false)
  verifiedAt        DateTime?
  
  // Timestamps
  receivedAt        DateTime @default(now())
  processedAt       DateTime?
  
  // Relations
  job               GenerationJob @relation(fields: [jobId], references: [id])
  
  @@index([provider, receivedAt])
  @@index([jobId])
  @@map("webhooks")
}

// ============================================
// NOUVEAUX MODÈLES PRD V2 - WORKFLOW SYSTEM
// ============================================

model WorkflowExecution {
  id                   String    @id @default(cuid())
  userId               String
  projectId            String?
  
  // Configuration du workflow
  config               Json      // WorkflowConfig complet
  workflowType         String    // 'complete' | 'image-only' | 'video-from-image'
  
  // Status et progress
  status               String    // 'INITIALIZING' | 'RUNNING' | 'COMPLETED' | 'FAILED' | 'CANCELLED'
  progress             Int       @default(0) // 0-100
  currentStep          String?
  
  // Coûts et timing
  estimatedCost        Int       // En crédits
  actualCost           Int?      // Coût réel déductible
  estimatedDuration    Int       // En secondes
  actualDuration       Int?      // Durée réelle
  
  // Résultats
  result               Json?     // { enhancedPrompt, imageUrl, videoUrl, etc. }
  
  // Erreurs
  error                String?   @db.Text
  
  // Timestamps
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  startedAt            DateTime
  completedAt          DateTime?
  
  // Relations
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  project              Project?  @relation(fields: [projectId], references: [id])
  
  @@index([userId, createdAt])
  @@index([status])
  @@index([workflowType])
  @@map("workflow_executions")
}

model CreditTransaction {
  id          String   @id @default(cuid())
  userId      String
  
  // Transaction details
  type        String   @db.VarChar(10) // 'DEBIT' | 'CREDIT'
  amount      Int      // Montant en crédits (positif ou négatif)
  reason      String   @db.VarChar(100) // 'workflow_prompt_enhancement' | etc.
  metadata    Json?    // Détails additionnels
  
  // Timestamps
  createdAt   DateTime @default(now())
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, createdAt]) // Historique utilisateur
  @@index([userId, type, createdAt]) // Filtrage par type
  @@index([reason, createdAt]) // Analytics par raison
  @@index([createdAt]) // Reports globaux
  @@map("credit_transactions")
}

model Content {
  id              String   @id @default(cuid())
  userId          String
  
  // Content type et métadonnées
  type            String   @db.VarChar(10) // 'image' | 'video'
  title           String   @db.VarChar(255)
  originalPrompt  String   @db.Text
  enhancedPrompt  String?  @db.Text
  
  // URLs des assets
  imageUrl        String?  @db.VarChar(1000)
  videoUrl        String?  @db.VarChar(1000)
  thumbnailUrl    String?  @db.VarChar(1000)
  
  // Status et métadonnées
  status          String   @default("PROCESSING") @db.VarChar(20) // 'PROCESSING' | 'COMPLETED' | 'FAILED'
  metadata        Json?    // Données additionnelles du workflow
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, status, createdAt]) // Dashboard et filtering
  @@index([userId, type, createdAt]) // Tri par type
  @@index([status, createdAt]) // Queue de processing
  @@index([createdAt]) // Timeline globale
  @@map("content")
}

// Mise à jour du modèle User pour inclure les nouveaux champs
model UserApiKeys {
  id                String   @id @default(cuid())
  userId            String   @unique
  
  // Clés API chiffrées (AES-256)
  openaiKey         String?
  imageGenKey       String?
  vo3Key           String?
  encryptionIV      String
  
  // Status de validation
  validationStatus  Json     @default("{}")
  lastUpdated       DateTime @default(now())
  createdAt         DateTime @default(now())
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_api_keys")
}

// Paramètres utilisateur
model UserSettings {
  id                     String   @id @default(cuid())
  userId                 String   @unique
  
  // Notifications
  emailNotifications     Boolean  @default(true)
  pushNotifications      Boolean  @default(true)
  weeklyReport           Boolean  @default(true)
  contentReminders       Boolean  @default(false)
  teamUpdates            Boolean  @default(true)
  marketingEmails        Boolean  @default(false)
  
  // Confidentialité
  profilePublic          Boolean  @default(false)
  contentAnalytics       Boolean  @default(true)
  dataCollection         Boolean  @default(true)
  thirdPartyIntegrations Boolean  @default(true)
  
  // Préférences de création
  defaultPlatforms       String[] @default(["tiktok"])
  autoSchedule           Boolean  @default(false)
  defaultVideoLength     Int      @default(30)
  qualityPreference      String   @default("high")
  autoSEO                Boolean  @default(true)
  
  // Timestamps
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  
  // Relations
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_settings")
}

