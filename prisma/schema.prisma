generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String          @id @default(cuid())
  email                  String          @unique
  name                   String?
  avatar                 String?
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  creatorType            String          @default("solo")
  platforms              String[]
  preferredLang          String          @default("fr")
  timezone               String          @default("Europe/Paris")
  planId                 String          @default("free")
  creditsBalance         Int             @default(100)
  subscriptionId         String?
  stripeCustomerId       String?         @unique
  stripeSubscriptionId   String?         @unique
  stripeCurrentPeriodEnd DateTime?
  stripePriceId          String?
  stripePaymentMethodId  String?
  apiCredentials         ApiCredential[]
  assets                 Asset[]
  creditLedger           CreditLedger[]
  jobs                   Job[]
  posts                  Post[]
  projects               Project[]
  prompts                Prompt[]
  socialAccounts         SocialAccount[]
  stripeCustomer         StripeCustomer?
  stripePayments         StripePayment[]
  usageEvents            UsageEvent[]
  generationJobs         GenerationJob[]

  @@map("users")
}

model ApiCredential {
  id            String    @id @default(cuid())
  userId        String
  provider      String
  encryptedKey  String
  isActive      Boolean   @default(true)
  lastValidated DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider])
  @@map("api_credentials")
}

model SocialAccount {
  id           String    @id @default(cuid())
  userId       String
  platform     String
  accountId    String
  username     String
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform, accountId])
  @@map("social_accounts")
}

model Project {
  id          String    @id @default(cuid())
  userId      String
  name        String
  description String?
  isDefault   Boolean   @default(false)
  category    String?
  tags        String[]  @default([])
  priority    String    @default("medium")
  status      String    @default("active")
  platforms   String[]  @default([])
  startDate   DateTime?
  endDate     DateTime?
  targetPosts Int?
  color       String?
  isPublic    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  assets         Asset[]
  jobs           Job[]
  posts          Post[]
  generationJobs GenerationJob[]
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("projects")
}

model Job {
  id                     String       @id @default(cuid())
  userId                 String
  projectId              String?
  type                   String
  status                 String       @default("pending")
  prompt                 String?
  config                 Json?
  estimatedTime          Int?
  actualTime             Int?
  progress               Int          @default(0)
  estimatedTimeRemaining Int?
  metadata               Json?
  resultAssetId          String?      @unique
  resultPostId           String?      @unique
  errorMessage           String?
  inngestId              String?
  priority               Int          @default(0)
  retryCount             Int          @default(0)
  maxRetries             Int          @default(3)
  createdAt              DateTime     @default(now())
  startedAt              DateTime?
  completedAt            DateTime?
  updatedAt              DateTime     @updatedAt
  resultAsset            Asset?       @relation("JobResult")
  project                Project?     @relation(fields: [projectId], references: [id])
  user                   User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  resultPost             Post?        @relation("JobResultPost")
  usageEvents            UsageEvent[]

  @@index([userId, status])
  @@index([inngestId])
  @@map("jobs")
}

model Asset {
  id              String   @id @default(cuid())
  userId          String
  projectId       String?
  jobId           String?  @unique
  filename        String
  originalName    String?
  mimeType        String
  fileSize        Int
  duration        Int?
  width           Int?
  height          Int?
  s3Key           String   @unique
  s3Bucket        String
  s3Region        String
  publicUrl       String?
  thumbnail       String?
  thumbnailUrl    String?
  thumbnailS3Key  String?
  frameRate       Int?
  previewGifPath  String?
  generatedBy     String?
  prompt          String?
  aiConfig        Json?
  status          String   @default("processing")
  tags            String[] @default([])
  description     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  creatorJob      Job?     @relation("JobResult", fields: [jobId], references: [resultAssetId])
  project         Project? @relation(fields: [projectId], references: [id])
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts           Post[]
  imageJobs       GenerationJob[] @relation("ImageAsset")
  videoJobs       GenerationJob[] @relation("VideoAsset")

  @@index([userId, status])
  @@index([s3Key])
  @@map("assets")
}

model Post {
  id              String    @id @default(cuid())
  userId          String
  projectId       String?
  assetId         String?
  jobId           String?   @unique
  title           String?
  description     String?
  hashtags        String[]
  platforms       String[]
  scheduledAt     DateTime?
  publishedAt     DateTime?
  status          String    @default("draft")
  platformData    Json?
  seoOptimized    Boolean   @default(false)
  performanceData Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  asset           Asset?    @relation(fields: [assetId], references: [id])
  creatorJob      Job?      @relation("JobResultPost", fields: [jobId], references: [resultPostId])
  project         Project?  @relation(fields: [projectId], references: [id])
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([scheduledAt])
  @@map("posts")
}

model Prompt {
  id         String    @id @default(cuid())
  userId     String?
  title      String
  content    String
  category   String?
  tags       String[]  @default([])
  usageCount Int       @default(0)
  lastUsedAt DateTime?
  isTemplate Boolean   @default(false)
  isPublic   Boolean   @default(false)
  isPinned   Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isPinned])
  @@index([isTemplate, isPublic])
  @@map("prompts")
}

model Plan {
  id                String   @id @default(cuid())
  name              String   @unique
  description       String?
  price             Int
  currency          String   @default("EUR")
  stripePriceId     String?  @unique
  stripeProductId   String?
  creditsPerMonth   Int
  maxGenerationsDay Int
  maxStorageGB      Int
  features          String[]
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("plans")
}

model CreditLedger {
  id          String   @id @default(cuid())
  userId      String
  amount      Int
  type        String
  description String?
  costEur     Decimal? @db.Decimal(10, 4)
  jobId       String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@map("credit_ledger")
}

model UsageEvent {
  id        String   @id @default(cuid())
  userId    String?
  jobId     String?
  event     String
  platform  String?
  provider  String?
  metadata  Json?
  costEur   Decimal? @db.Decimal(10, 4)
  duration  Int?
  createdAt DateTime @default(now())
  job       Job?     @relation(fields: [jobId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])

  @@index([event, createdAt])
  @@index([userId, createdAt])
  @@map("usage_events")
}

model StripeWebhook {
  id            String    @id @default(cuid())
  stripeEventId String    @unique
  eventType     String
  processed     Boolean   @default(false)
  attempts      Int       @default(0)
  lastError     String?
  data          Json?
  createdAt     DateTime  @default(now())
  processedAt   DateTime?

  @@index([processed, createdAt])
  @@map("stripe_webhooks")
}

model StripeCustomer {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  stripeCustomerId       String    @unique
  email                  String
  name                   String?
  subscriptionId         String?
  subscriptionStatus     String?
  currentPeriodEnd       DateTime?
  cancelAtPeriodEnd      Boolean   @default(false)
  defaultPaymentMethodId String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("stripe_customers")
}

model StripePayment {
  id              String   @id @default(cuid())
  userId          String
  stripePaymentId String   @unique
  stripeInvoiceId String?
  amount          Int
  currency        String   @default("eur")
  status          String
  description     String?
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@map("stripe_payments")
}

model GenerationJob {
  id                String   @id @default(cuid())
  userId            String
  projectId         String?
  
  // Type de génération
  kind              String   // 'IMAGE' | 'VIDEO' | 'IMAGE_TO_VIDEO'
  status            String   // Machine à états
  
  // Prompts
  inputPrompt       String   @db.Text
  imagePrompt       String?  @db.Text
  videoPrompt       String?  @db.Text
  
  // Assets liés
  imageAssetId      String?
  videoAssetId      String?
  
  // Provider data
  providerJobId     String?  @unique
  provider          String?  // 'openai' | 'veo3'
  providerData      Json?
  
  // Coûts et métriques
  costCents         Int      @default(0)
  processingTime    Int?     // millisecondes
  retryCount        Int      @default(0)
  
  // Erreurs
  errorCode         String?
  errorMessage      String?  @db.Text
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  startedAt         DateTime?
  completedAt       DateTime?
  
  // Relations
  user              User     @relation(fields: [userId], references: [id])
  project           Project? @relation(fields: [projectId], references: [id])
  imageAsset        Asset?   @relation("ImageAsset", fields: [imageAssetId], references: [id])
  videoAsset        Asset?   @relation("VideoAsset", fields: [videoAssetId], references: [id])
  webhooks          Webhook[]
  
  @@index([userId, createdAt])
  @@index([status])
  @@index([providerJobId])
  @@map("generation_jobs")
}

model Webhook {
  id                String   @id @default(cuid())
  provider          String   // 'veo3' | 'openai'
  jobId             String
  
  // Payload
  payload           Json
  headers           Json?
  signature         String?
  
  // Vérification
  verified          Boolean  @default(false)
  verifiedAt        DateTime?
  
  // Timestamps
  receivedAt        DateTime @default(now())
  processedAt       DateTime?
  
  // Relations
  job               GenerationJob @relation(fields: [jobId], references: [id])
  
  @@index([provider, receivedAt])
  @@index([jobId])
  @@map("webhooks")
}
