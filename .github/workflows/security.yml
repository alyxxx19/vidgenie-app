name: 'Security Scan'

# ==================================================
# PHASE 5.3 - Pipeline de sécurité automatisé
# Scans de sécurité réguliers et alertes
# ==================================================

on:
  schedule:
    # Tous les jours à 2h du matin UTC
    - cron: '0 2 * * *'
  push:
    branches: [main]
    paths: 
      - 'package*.json'
      - 'Dockerfile'
      - '.github/workflows/**'
  workflow_dispatch:

jobs:
  # ================================
  # Scan des dépendances
  # ================================
  dependency-scan:
    name: 'Dependency Security Scan'
    runs-on: ubuntu-latest
    
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 'Install dependencies'
        run: npm ci --audit=false --fund=false

      - name: 'Run npm audit'
        run: |
          npm audit --audit-level=moderate --json > audit-results.json || true
          npm audit --audit-level=moderate

      - name: 'Upload audit results'
        uses: actions/upload-artifact@v3
        with:
          name: audit-results
          path: audit-results.json

      - name: 'Snyk security scan'
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json > snyk-results.json

      - name: 'Upload Snyk results'
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: snyk-results
          path: snyk-results.json

  # ================================
  # Scan de sécurité du code
  # ================================
  code-scan:
    name: 'Code Security Analysis'
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: 'Initialize CodeQL'
        uses: github/codeql-action/init@v2
        with:
          languages: 'javascript'
          queries: security-extended

      - name: 'Autobuild'
        uses: github/codeql-action/autobuild@v2

      - name: 'Perform CodeQL Analysis'
        uses: github/codeql-action/analyze@v2

      - name: 'ESLint security scan'
        run: |
          npm ci --audit=false --fund=false
          npx eslint . --ext .js,.jsx,.ts,.tsx --format json -o eslint-results.json || true
          npx eslint . --ext .js,.jsx,.ts,.tsx

      - name: 'Upload ESLint results'
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: eslint-results
          path: eslint-results.json

  # ================================
  # Scan des secrets
  # ================================
  secret-scan:
    name: 'Secret Detection'
    runs-on: ubuntu-latest
    
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Récupère tout l'historique

      - name: 'Run TruffleHog'
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: 'Run GitLeaks'
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          config-path: .gitleaks.toml

  # ================================
  # Scan de l'image Docker
  # ================================
  container-scan:
    name: 'Container Security Scan'
    runs-on: ubuntu-latest
    
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: 'Set up Docker Buildx'
        uses: docker/setup-buildx-action@v3

      - name: 'Build Docker image'
        uses: docker/build-push-action@v5
        with:
          context: .
          target: runner
          load: true
          tags: vidgenie:security-scan

      - name: 'Run Trivy vulnerability scanner'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'vidgenie:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 'Upload Trivy scan results'
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 'Snyk Container scan'
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          npm install -g snyk
          snyk container test vidgenie:security-scan --severity-threshold=high --json > snyk-container-results.json || true

      - name: 'Upload Snyk container results'
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: snyk-container-results
          path: snyk-container-results.json

  # ================================
  # Test de pénétration automatisé
  # ================================
  penetration-test:
    name: 'Automated Penetration Testing'
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: 'OWASP ZAP Full Scan'
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: 'https://staging.vidgenie.com'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
          issue_title: 'OWASP ZAP Security Vulnerabilities'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Nuclei vulnerability scan'
        uses: projectdiscovery/nuclei-action@main
        with:
          target: 'https://staging.vidgenie.com'
          templates: 'exposures,vulnerabilities,misconfigurations'
          output: 'nuclei-results.txt'

      - name: 'Upload nuclei results'
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: nuclei-results
          path: nuclei-results.txt

  # ================================
  # Rapport de sécurité
  # ================================
  security-report:
    name: 'Generate Security Report'
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-scan, secret-scan, container-scan]
    if: always()
    
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: 'Download all artifacts'
        uses: actions/download-artifact@v3
        with:
          path: security-artifacts

      - name: 'Generate security report'
        run: |
          cat > security-report.md << EOF
          # Security Scan Report
          
          **Date:** $(date)
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref_name }}
          
          ## Summary
          
          | Scan Type | Status | Critical | High | Medium | Low |
          |-----------|---------|----------|------|--------|-----|
          | Dependencies | ${{ needs.dependency-scan.result }} | - | - | - | - |
          | Code Analysis | ${{ needs.code-scan.result }} | - | - | - | - |
          | Secrets | ${{ needs.secret-scan.result }} | - | - | - | - |
          | Container | ${{ needs.container-scan.result }} | - | - | - | - |
          
          ## Actions Required
          
          EOF
          
          # Ajouter les détails des scans si ils ont échoué
          if [ "${{ needs.dependency-scan.result }}" != "success" ]; then
            echo "- ❌ **Dependency scan failed** - Check npm audit and Snyk results" >> security-report.md
          fi
          
          if [ "${{ needs.code-scan.result }}" != "success" ]; then
            echo "- ❌ **Code analysis failed** - Check CodeQL and ESLint results" >> security-report.md
          fi
          
          if [ "${{ needs.secret-scan.result }}" != "success" ]; then
            echo "- ❌ **Secret detection failed** - Potential secrets found in code" >> security-report.md
          fi
          
          if [ "${{ needs.container-scan.result }}" != "success" ]; then
            echo "- ❌ **Container scan failed** - Check Trivy and Snyk container results" >> security-report.md
          fi
          
          echo "" >> security-report.md
          echo "For detailed results, check the artifacts in this workflow run." >> security-report.md

      - name: 'Upload security report'
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md

      - name: 'Create security issue'
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Security vulnerabilities detected',
              body: report,
              labels: ['security', 'high-priority']
            });

      - name: 'Notify security team'
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '🚨 Security vulnerabilities detected in repository!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }}