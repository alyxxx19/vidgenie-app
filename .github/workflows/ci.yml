name: 'CI Pipeline'

# ==================================================
# PHASE 5.3 - Pipeline CI/CD GitHub Actions
# Pipeline d'intégration continue complet
# ==================================================

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # ================================
  # Tests et validation du code
  # ================================
  test:
    name: 'Tests & Code Quality'
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: vidgenie_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Install dependencies'
        run: |
          npm ci --audit=false --fund=false
          
      - name: 'Generate Prisma client'
        run: npx prisma generate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vidgenie_test

      - name: 'Run database migrations'
        run: npx prisma db push
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vidgenie_test

      - name: 'TypeScript compilation check'
        run: npx tsc --noEmit

      - name: 'ESLint check'
        run: npm run lint

      - name: 'Run tests'
        run: npm run test:ci
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vidgenie_test
          NEXTAUTH_SECRET: test-secret-key-for-ci
          ENCRYPTION_KEY: test-encryption-key-32-chars-long

      - name: 'Upload test coverage'
        uses: codecov/codecov-action@v5
        if: always()
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: 'Build application'
        run: npm run build
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vidgenie_test
          NEXTAUTH_SECRET: test-secret-key-for-ci
          NEXTAUTH_URL: http://localhost:3000
          ENCRYPTION_KEY: test-encryption-key-32-chars-long

  # ================================
  # Analyse de sécurité
  # ================================
  security:
    name: 'Security Analysis'
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Install dependencies'
        run: npm ci --audit=false --fund=false

      - name: 'Run npm audit'
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: 'Run Snyk security test'
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: 'CodeQL Analysis'
        uses: github/codeql-action/analyze@v2
        with:
          languages: 'javascript'

      - name: 'OWASP ZAP Baseline Scan'
        uses: zaproxy/action-baseline@v0.7.0
        if: github.event_name == 'pull_request'
        with:
          target: 'http://localhost:3000'

  # ================================
  # Build et test Docker
  # ================================
  docker:
    name: 'Docker Build & Test'
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: 'Set up Docker Buildx'
        uses: docker/setup-buildx-action@v3

      - name: 'Build Docker image'
        uses: docker/build-push-action@v5
        with:
          context: .
          target: runner
          platforms: linux/amd64
          push: false
          tags: vidgenie:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 'Test Docker image'
        run: |
          docker run --rm -d \
            --name vidgenie-test \
            -p 3000:3000 \
            -e DATABASE_URL="postgresql://test:test@host.docker.internal:5432/test" \
            -e NEXTAUTH_SECRET="test-secret" \
            -e ENCRYPTION_KEY="test-encryption-key-32-chars-long" \
            vidgenie:test
          
          sleep 30
          
          # Test health endpoint
          curl -f http://localhost:3000/api/health || exit 1
          
          docker stop vidgenie-test

  # ================================
  # Performance tests
  # ================================
  performance:
    name: 'Performance Tests'
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Install dependencies'
        run: npm ci --audit=false --fund=false

      - name: 'Build application'
        run: npm run build
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vidgenie_test
          NEXTAUTH_SECRET: test-secret-key-for-ci
          NEXTAUTH_URL: http://localhost:3000
          ENCRYPTION_KEY: test-encryption-key-32-chars-long

      - name: 'Lighthouse CI'
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouse.config.js'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # ================================
  # Notification des résultats
  # ================================
  notify:
    name: 'Notify Results'
    runs-on: ubuntu-latest
    needs: [test, security, docker, performance]
    if: always()
    
    steps:
      - name: 'Notify success'
        if: ${{ needs.test.result == 'success' && needs.security.result == 'success' && needs.docker.result == 'success' }}
        run: |
          echo "✅ All CI checks passed successfully!"
          
      - name: 'Notify failure'
        if: ${{ needs.test.result == 'failure' || needs.security.result == 'failure' || needs.docker.result == 'failure' }}
        run: |
          echo "❌ CI pipeline failed. Please check the logs."
          exit 1